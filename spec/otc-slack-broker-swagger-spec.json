{
	"swagger": "2.0",
	"info": {
		"description": "This swagger document describes the options and endpoints of the Slack Broker.",
		"version": "0.0.1",
		"title": "IBM OTC Slack Broker API"
	},
	"host": "localhost:3900",
	"basePath": "/slack-broker/api/v1",
	"tags": [
		{
			"name": "service_instances",
			"description": "Endpoints for fetching information about a service instance."
		},
        {
            "name": "messaging",
            "description": "Endpoints for message/event notification."
        },
		{
			"name": "monitoring",
			"description": "Endpoints for monitoring. Note: The base URL for these endpoints are /."
		}
	],
	"schemes": [
		"https", "http"
	],
	"paths": {
		"/service_instances/{sid}": {
			"put": {
				"tags": [
					"service_instances"
				],
				"summary": "Create or update a service instance",
				"description": "Returns information about the created or updated service instance.",
				"operationId": "createOrUpdateServiceInstance",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "sid",
						"in": "path",
						"description": "The API generated unique id of a service instance",
						"type": "string",
						"required": true
					},
					{
						"in": "body",
			            "name": "body",
			            "description": "New toolchain details",
			            "required": false,
			            "schema": {
			              "$ref": "#/definitions/createOrUpdateServiceInstance"
			            }
					},
					{
						"name": "Authorization",
						"in": "header",
						"description": "Broker Basic Credentials",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful request",
						"schema": {
							"$ref": "#/definitions/putServiceInstanceResponse"
						}
					},
					"400": {
						"description": "Returned when the request parameters are invalid."
					},
					"401": {
						"description": "Returned when a user is not authenticated with an auth header."
					},
					"403": {
						"description": "Returned when a user makes a request to something they are not entitled to."
					},
					"500": {
						"description": "Returned when error occurs while responding to the request."
					}
				}
			},
			"delete": {
				"tags": [
					"service_instances"
				],
				"summary": "Delete a service instance",
				"description": "Removes a service instance.",
				"operationId": "unbindServiceInstance",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "sid",
						"in": "path",
						"description": "The API generated unique id of a service instance",
						"type": "string",
						"required": true
					},
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Broker Basic Credentials",
                        "type": "string"
                    }
				],
				"responses": {
					"204": {
						"description": "Successful request"
					},
					"401": {
						"description": "Returned when a user is not authenticated with an auth header."
					},
					"403": {
						"description": "Returned when a user makes a request to something they are not entitled to."
					},
					"500": {
						"description": "Returned when error occurs while responding to the request."
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			},
			"patch": {
                "tags": [
                    "service_instances"
                ],
                "summary": "Patch a service instance",
                "description": "Returns information about the patched service instance.",
                "operationId": "patchServiceInstance",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "sid",
                        "in": "path",
                        "description": "The API generated unique id of a service instance",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Patched service instance details",
                        "required": false,
                        "schema": {
                          "$ref": "#/definitions/patchServiceInstance"
                        }
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Broker Basic Credentials",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "schema": {
                            "$ref": "#/definitions/patchServiceInstanceResponse"
                        }
                    },
                    "400": {
                        "description": "Returned when the request parameters are invalid."
                    },
                    "401": {
                        "description": "Returned when a user is not authenticated with an auth header."
                    },
                    "403": {
                        "description": "Returned when a user makes a request to something they are not entitled to."
                    },
                    "500": {
                        "description": "Returned when error occurs while responding to the request."
                    }
                }
			}
		},
		"/service_instances/{sid}/toolchains": {
			"delete": {
				"tags": [
					"service_instances"
				],
				"summary": "Delete a service instance from all toolchains",
				"description": "Removes a service instance from all toolchains.",
				"operationId": "unbindServiceInstanceFromAllToolchains",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "sid",
						"in": "path",
						"description": "The API generated unique id of a service instance",
						"type": "string",
						"required": true
					},
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Broker Basic Credentials",
                        "type": "string"
                    }
				],
				"responses": {
					"204": {
						"description": "Successful request"
					},
					"401": {
						"description": "Returned when a user is not authenticated with an auth header."
					},
					"500": {
						"description": "Returned when error occurs while responding to the request."
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/service_instances/{sid}/toolchains/{tid}": {
			"put": {
				"tags": [
					"service_instances"
				],
				"summary": "Bind a service instance to a toolchain",
				"description": "Returns information about a service instance.",
				"operationId": "bindServiceInstanceToToolchain",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "sid",
						"in": "path",
						"description": "The API generated unique id of a service instance",
						"type": "string",
						"required": true
					},
					{
						"name": "tid",
						"in": "path",
						"description": "A toolchain id to bind to the service instance",
						"type": "string",
						"required": true
					},
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Broker Basic Credentials",
                        "type": "string"
                    }
				],
				"responses": {
					"204": {
						"description": "Successful request"
					},
					"401": {
						"description": "Returned when a user is not authenticated with an auth header."
					},
					"403": {
						"description": "Returned when a user makes a request to something they are not entitled to."
					},
					"500": {
						"description": "Returned when error occurs while responding to the request."
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			},
			"delete": {
				"tags": [
					"service_instances"
				],
				"summary": "Delete a service instance from a toolchain",
				"description": "Removes a service instance.",
				"operationId": "unbindServiceInstanceFromToolchain",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "sid",
						"in": "path",
						"description": "The API generated unique id of a service instance",
						"type": "string",
						"required": true
					},
					{
						"name": "tid",
						"in": "path",
						"description": "A toolchain id to unbind from the service instance",
						"type": "string",
						"required": true
					},
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Broker Basic Credentials",
                        "type": "string"
                    }
				],
				"responses": {
					"204": {
						"description": "Successful request"
					},
					"401": {
						"description": "Returned when a user is not authenticated with an auth header."
					},
					"403": {
						"description": "Returned when a user makes a request to something they are not entitled to."
					},
					"500": {
						"description": "Returned when error occurs while responding to the request."
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/version": {
			"get": {
				"tags": [
					"monitoring"
				],
				"summary": "Get the build version of the node application",
				"description": "Returns the build number of the current running node application.",
				"operationId": "version",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Successful request",
						"schema": {
			              "type": "object",
			              "$ref":"#/definitions/getVersion"
			            }
					}
				}
			}
		},
		"/status": {
            "get": {
                "tags": [
                    "monitoring"
                ],
                "summary": "Get the status of the Slack Broker node application",
                "description": "Returns the status of the current running Slack Broker node application.",
                "operationId": "statusEndpoint",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Slack Broker is running"
                    }
                }
            }
        },
        "/messaging/accept": {
            "post": {
                "tags": [
                    "messaging"
                ],
                "summary": "Endpoint for incoming notification/message/events",
                "description": "Endpoint for incoming message/event notification (typically used by Lifecycle Message Store - LMS).",
                "operationId": "acceptEvent",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Event Payload",
                        "schema": {
                          "$ref": "#/definitions/postMessagingAccept"
                        }
                    },
                    {
                        "name": "Authorization",
                        "in": "header",
                        "description": "Toolchain Basic Credentials",
                        "type": "string"
                    }                
                ],
                "responses": {
                    "204": {
                        "description": "Successful request"
                    },
                    "401": {
                        "description": "Returned when a user is not authenticated with an auth header."
                    },
                    "403": {
                        "description": "Returned when a user makes a request to something they are not entitled to."
                    },
                    "500": {
                        "description": "Returned when error occurs while responding to the request."
                    }
                }
                
            }
        }
	},
	"definitions": {
		"createOrUpdateServiceInstance": {
	  		"id": "Create or update service instance",
	  		"description": "Body structure for creating or updating a service instance.",
	    	"properties": {
				"parameters": {
					"description": "JSON data providing Slack context  Note: To use a existing channel, you can either set channel_id attribute instead or channel_name with the encoded id or channel name. For a new channel to create, the channel_name needs to be set (and channel_topic attribute). (ie \"channel_id=\"C0J8MUXSA\")",
					"type": "string",
				    "example": {
				    	"api_token": "xoxp-13948444357-13953293954-13959136117-xxxxxxx",
				    	"channel_name": "Channel Toolchain 1",
				    	"channel_topic": "The topic for channel dedicated to toolchain 1"
				    }
				},
				"service_id": {
					"description": "The unique id of the service that an instance is being created from",
					"type": "string",
					"example": "slack"
				},
				"organization_guid": {
					"description": "The organization the service instance is associated with",
					"type": "string",
					"example": "d02d29f1-e7bb-4977-8a6f-26d7b7bb893e"
				},
                "service_credentials": {
                    "description": "The service credentials for authenticating with TIAM",
                    "type": "string"
                }
			},
            "required": [
                "service_id", "organization_guid", "service_credentials", "parameters"
            ]
	    },
        "patchServiceInstance": {
            "id": "Patch a service instance",
            "description": "Body structure for patching a service instance.",
            "properties": {
                "parameters": {
                    "description": "JSON data providing Slack context  Note: To use a existing channel, you can either set channel_id attribute instead or channel_name with the encoded id or channel name. For a new channel to create, the channel_name needs to be set (and channel_topic attribute). (ie \"channel_id=\"C0J8MUXSA\")",
                    "type": "string",
                    "example": {
                        "api_token": "xoxp-13948444357-13953293954-13959136117-xxxxxxx",
                        "channel_name": "Channel Toolchain 1",
                        "channel_topic": "The topic for channel dedicated to toolchain 1"
                    }
                },
                "service_id": {
                    "description": "The unique id of the service that an instance is being created from",
                    "type": "string",
                    "example": "slack"
                },
                "organization_guid": {
                    "description": "The organization the service instance is associated with",
                    "type": "string",
                    "example": "d02d29f1-e7bb-4977-8a6f-26d7b7bb893e"
                },
                "service_credentials": {
                    "description": "The service credentials for authenticating with TIAM",
                    "type": "string"
                }
            },
            "required": [
                "service_id", "organization_guid", "service_credentials", "parameters"
            ]
        },
	    "getVersion": {
	  	  "description": "Response structure for GET version",
	        "properties": {
	      		"build": {
	      		  "type": "string",
	      		  "example": "5",
	      		  "required": true
	      		}
      		}
  		},
		"putServiceInstanceResponse": {
			"properties": {
				"instance_id": {
					"description": "The created or updated service instance",
					"type": "string",
					"example": "C0JB1M6M9"
				},
				"dashboard_url": {
					"description": "The URL of a user-facing user interface for this instance of a service",
					"type": "string",
					"example": "https://cloudplatform.slack.com/messages/channel-toolchain-1"
				},
				"parameters": {
					"description": "Arbitraty JSON data for service instance providing Slack context and label",
					"type": "string",
					"example": "{'api_token': 'xoxp-13948444357-13953293954-13959136117-xxxxxxx','channel_name': 'channel-toolchain-1', 'label': '# channel-toolchain-1'}"
				},
				"organization_guid": {
					"description": "The organization the service instance is associated with",
					"type": "string",
					"example": "d02d29f1-e7bb-4977-8a6f-26d7b7bb893e"
				}
			},
			"required": [
				"instance_id", "dashboard_url", "parameters", "organization_guid"
			]
		},
		"patchServiceInstanceResponse": {
            "properties": {
                "instance_id": {
                    "description": "The created or updated service instance",
                    "type": "string",
                    "example": "C0JB1M6M9"
                },
                "dashboard_url": {
                    "description": "The URL of a user-facing user interface for this instance of a service",
                    "type": "string",
                    "example": "https://cloudplatform.slack.com/messages/channel-toolchain-1"
                },
                "parameters": {
                    "description": "Arbitraty JSON data for service instance providing Slack context and label",
                    "type": "string",
                    "example": "{'api_token': 'xoxp-13948444357-13953293954-13959136117-xxxxxxx','channel_name': 'channel-toolchain-1', 'label': '# channel-toolchain-1'}"
                },
                "organization_guid": {
                    "description": "The organization the service instance is associated with",
                    "type": "string",
                    "example": "d02d29f1-e7bb-4977-8a6f-26d7b7bb893e"
                }
            },
            "required": [
                "instance_id", "dashboard_url", "parameters", "organization_guid"
            ]
        },        
        "postMessagingAccept": {
            "id": "Notification",
            "description": "Body structure for a notification",
            "properties": {
                "service_id": {
                    "description": "The unique id of the service that is the source of the message/event",
                    "type": "string",
                    "example": "pipeline"
                },
                "instance_id": {
                    "description": "The Slack broker service instance is target of the event",
                    "type": "string",
                    "example": "d02d29f1-e7bb-4977-8a6f-26d7b7bb893e"
                },
                "toolchain_id": {
                    "description": "The toolchain id that is related to the event and the toolchain for which the slack broker service instance is part of.",
                    "type": "string",
                    "example": "2e538e2e-b01a-45f1-8a4d-97311ce8ec0b"
                },
                "payload": {
                    "description": "Event payload as JSON data",
                    "type": "string"
                }
            },
            "required": [
                "service_id", "instance_id", "toolchain_id", "payload"
            ]
        }
	}
}

